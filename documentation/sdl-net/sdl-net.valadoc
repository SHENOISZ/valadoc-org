/**
 * Initialize the network API 
 *
 * SDL must be initialized before calls to functions in this library, 
 * because this library uses utility functions from the SDL library.
 */
SDLNet.init


/**
 * Cleanup the network API
 */
SDLNet.quit


/**
 * Write a 16bit value to a network packet buffer
 */
SDLNet.write16


/**
 * Write a 32bit value to a network packet buffer
 */
SDLNet.write32


/**
 * Read a 16bit value from a network packet buffer
 */
SDLNet.read16


/**
 * Read a 32bit value from a network packet buffer
 */
SDLNet.read32


/** 
 * Resolve a host name and port to an IP address in network form.
 *
 * @return If the function succeeds, it will return 0.
 * If the host couldn't be resolved, the host portion of the returned
 * address will be INADDR_NONE, and the function will return -1.
 * If ``host`` is NULL, the resolved host will be set to INADDR_ANY.
 */
SDLNet.IPAddress.from_host


/**
 * Resolve an ip address to a host name in canonical form. 
 *
 * Note that this function is not thread-safe.
 *
 * @return If the ip couldn't be resolved, this function returns null,
 * otherwise a pointer to a static buffer containing the hostname
 * is returned.  
 */
SDLNet.IPAddress.lookup


/**
 * Allocate a single UDP packet ``size`` bytes long.
 */
SDLNet.UDPPacket.UDPPacket


/**
 * Resize a single UDP packet ``newsize`` bytes long.
 */
SDLNet.UDPPacket.resize


/** 
 * Open a TCP network socket
 *
 * If ip.host is INADDR_NONE or INADDR_ANY, this creates a local server
 * socket on the given port, otherwise a TCP connection to the remote
 * host and port is attempted. 
 *
 * @param ip The address passed in should already be
 *   swapped to network byte order (addresses returned from 
 *   SDLNet_ResolveHost() are already in the correct form).
 * @return The newly created socket is returned, or null if there was an error.
 */
SDLNet.TCPSocket.TCPSocket


/**
 * Accept an incoming connection on the given server socket.
 *
 * @return The newly created socket is returned, or null if there was an error.
 */
SDLNet.TCPSocket.accept


/**
 * Get the IP address of the remote system associated with the socket.
 *
 * @return If the socket is a server socket, this function returns null.
 */
SDLNet.TCPSocket.get_address


/**
 * Send data over the non-server socket ``sock``
 *
 * @param data The data to send
 * @return This function returns the actual amount of data sent.  If the return value
 *   is less than the amount of data sent, then either the remote connection was
 *   closed, or an unknown socket error occurred.
 */
SDLNet.TCPSocket.send


/**
 * Receive up to (the length of data)  bytes of data over the non-server socket ``sock``,
 * and store them in the buffer pointed to by ``data``.
 *
 * @param data The buffer to store received data
 * @return This function returns the actual amount of data received.  If the return
 *   value is less than or equal to zero, then either the remote connection was
 *   closed, or an unknown socket error occurred.
 */
SDLNet.TCPSocket.receive


/**
 * Open a UDP network socket
 *
 * @param port If ``port`` is non-zero, the UDP socket is bound to a local port.
 *   The ``port`` should be given in native byte order, but is used
 *   internally in network (big endian) byte order, in addresses, etc.
 *   This allows other systems to send to this socket via a known port.
 */
SDLNet.UDPSocket.UDPSocket

/**
 * Bind the address ``address`` to the requested channel on the UDP socket.
 *
 * @param channel If the channel is -1, then the first unbound channel that has not yet
 *   been bound to the maximum number of addresses will be bound with
 *   the given address as it's primary address.<<BR>>
 *   If the channel is already bound, this new address will be added to the
 *   list of valid source addresses for packets arriving on the channel.<<BR>>
 *   If the channel is not already bound, then the address becomes the primary
 *   address, to which all outbound packets on the channel are sent.
 * @param address If the channel is -1, then the first unbound channel that has not yet
 *   been bound to the maximum number of addresses will be bound with
 *   the given address as it's primary address.<<BR>>
 *   If the channel is already bound, this new address will be added to the
 *   list of valid source addresses for packets arriving on the channel.<<BR>>
 *   If the channel is not already bound, then the address becomes the primary
 *   address, to which all outbound packets on the channel are sent.
 * @return This function returns the channel which was bound, or -1 on error.
 */
SDLNet.UDPSocket.bind

/**
 * Unbind all addresses from the given channel
 */
SDLNet.UDPSocket.unbind


/**
 * Get the primary IP address of the remote system associated with the 
 * socket and channel.  
 *
 * @return If the channel is -1, then the primary IP port
 *   of the UDP socket is returned -- this is only meaningful for sockets
 *   opened with a specific port.
 *   If the channel is not bound and not -1, this function returns null
 */
SDLNet.UDPSocket.get_address


/**
 * Send a single packet to the specified channel.
 *
 * ''NOTE:''
 *
 * The maximum size of the packet is limited by the MTU (Maximum Transfer Unit)
 * of the transport medium.  It can be as low as 250 bytes for some PPP links,
 * and as high as 1500 bytes for ethernet.
 *
 * @param channel If the channel specified in the packet is -1, the packet will be sent to
 *   the address in the ``src`` member of the packet.
 * @param packet The packet will be updated with the status of the packet after it has
 *  been sent.
 * @return This function returns 1 if the packet was sent, or 0 on error.
 */
SDLNet.UDPSocket.send


/**
 * Receive a single packet from the UDP socket.
 *
 * @param packet The returned packet contains the source address and the channel it arrived
 *   on.  If it did not arrive on a bound channel, the the channel will be set
 *   to -1.<<BR>>
 *   The channels are checked in highest to lowest order, so if an address is
 *   bound to multiple channels, the highest channel with the source address
 *   bound will be returned.
 * @return This function returns the number of packets read from the network, or -1
 *   on error.  This function does not block, so can return 0 packets pending.
 */
SDLNet.UDPSocket.receive


/**
 * Send a vector of packets to the the channels specified within the packet.
 *
 * If the channel specified in the packet is -1, the packet will be sent to
 * the address in the ``src`` member of the packet.
 *
 * Each packet will be updated with the status of the packet after it has 
 * been sent, -1 if the packet send failed.
 *
 * @param packets The packets to send
 * @return This function returns the number of packets sent.
 */
SDLNet.UDPSocket.send_many


/**
 * Receive a vector of pending packets from the UDP socket.
 *
 * @param packets The returned packets contain the source address and the channel they arrived
 *   on.  If they did not arrive on a bound channel, the the channel will be set
 *   to -1.<<BR>>
 *   The channels are checked in highest to lowest order, so if an address is
 *   bound to multiple channels, the highest channel with the source address
 *   bound will be returned.
 * @return This function returns the number of packets read from the network, or -1
 *   on error.  This function does not block, so can return 0 packets pending.
 */
SDLNet.UDPSocket.receive_many


/**
 * Allocate a socket set
 *
 * @param maxsockets This creates a socket set for up to ``maxsockets`` sockets
 */
SDLNet.SocketSet.SocketSet


/**
 * Add a socket to a set of sockets to be checked for available data
 */
SDLNet.SocketSet.add


/**
 * Remove a socket from a set of sockets to be checked for available data
 */
SDLNet.SocketSet.remove


/**
 * This function checks to see if data is available for reading on the
 * given set of sockets.  
 *
 * @param timeout If ``timeout`` is 0, it performs a quick poll,
 *   otherwise the function returns when either data is available for
 *   reading, or the timeout in milliseconds has elapsed, which ever occurs
 *   first.  
 * @return This function returns the number of sockets ready for reading, 
 *   or -1 if there was an error with the select() system call.
 */
SDLNet.SocketSet.has_data
